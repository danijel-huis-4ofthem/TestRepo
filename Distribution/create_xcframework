# Guide: https://developer.apple.com/documentation/xcode/creating-a-multi-platform-binary-framework-bundle

# Initialize variables
ARG_MODULE=""
ARG_OUTPUT_NAME=""

# Parse command-line arguments
while [[ "$#" -gt 0 ]]; do
    case $1 in
        --help)
            echo "--module (mandatory) is the name of project folder, xcodeproj file and scheme. Those three should have same name. In the end project should be at (../module/module.xcodeproj) and it should have scheme named same as module."
            exit 1
            ;;
            
        --module)
            ARG_MODULE="$2"
            shift
            ;;

         --name)
            ARG_OUTPUT_NAME="$2"
            shift
            ;;

        *)
            echo "Unknown parameter passed: $1"
            exit 1
            ;;
    esac
    shift
done

# Check if --scheme parameter is provided and not empty
if [[ -z "$ARG_MODULE" ]]; then
    echo "Error: --module parameter is mandatory and cannot be empty."
    exit 1
fi

# This is need to override macro permission
defaults write com.apple.dt.Xcode IDESkipMacroFingerprintValidation -bool YES

# Continue with the rest of your script
WORKSPACE="../Test.xcworkspace"
SCHEME=$ARG_MODULE
PROJECT_PATH="../$ARG_MODULE/$SCHEME.xcodeproj"
OUTPUT_NAME="${ARG_OUTPUT_NAME:-$ARG_SCHEME}.xcframework.zip"
BUILD_PATH="fastlane/build/$SCHEME"
echo "SCHEME is set to: $SCHEME"
echo "PROJECT_PATH is set to: $PROJECT_PATH"
echo "OUTPUT_NAME is set to: $OUTPUT_NAME"
echo "BUILD_PATH is set to: $BUILD_PATH"

# Setting up current working directory (needed when executing the script by double tapping it)
cd -- "$(dirname -- "$BASH_SOURCE")"
echo "Running create_xcframework script with current working directory: $PWD"

echo "Cleaning build dir: $BUILD_PATH"
rm -rf "./$BUILD_PATH"

echo "Cleaning scheme"
xcodebuild \
    clean \
    -workspace $WORKSPACE \
    -scheme $SCHEME

echo "Create an archive for iOS device"
# SWIFT_ACTIVE_COMPILATION_CONDITIONS is needed because of swift-syntax. It uses "RESILIENT_LIBRARIES" flag for some reason.
xcodebuild \
    archive \
        SKIP_INSTALL=NO \
        BUILD_LIBRARY_FOR_DISTRIBUTION=YES \
        -workspace $WORKSPACE \
        -scheme $SCHEME \
        -configuration Release \
        -destination "generic/platform=iOS" \
        -archivePath "$BUILD_PATH/$SCHEME-iOS.xcarchive" \
        SWIFT_ACTIVE_COMPILATION_CONDITIONS="RESILIENT_LIBRARIES" \
|| { echo "Error: Build failed. Aborting."; exit 1; }

echo "Create an archive for iOS simulator"
# SWIFT_ACTIVE_COMPILATION_CONDITIONS is needed because of swift-syntax. It uses "RESILIENT_LIBRARIES" flag for some reason.
xcodebuild \
    archive \
        SKIP_INSTALL=NO \
        BUILD_LIBRARY_FOR_DISTRIBUTION=YES \
        -workspace $WORKSPACE \
        -scheme $SCHEME \
        -configuration Release \
        -destination "generic/platform=iOS Simulator" \
        -archivePath "$BUILD_PATH/$SCHEME-iOS_Simulator.xcarchive"  \
        SWIFT_ACTIVE_COMPILATION_CONDITIONS="RESILIENT_LIBRARIES" \
|| { echo "Error: Build failed. Aborting."; exit 1; }

echo "Convert the archives to .framework and package them both into one xcframework"
xcodebuild \
    -create-xcframework \
    -archive "$BUILD_PATH/$SCHEME-iOS.xcarchive" -framework "$SCHEME.framework" \
    -archive "$BUILD_PATH/$SCHEME-iOS_Simulator.xcarchive" -framework "$SCHEME.framework" \
    -output "$BUILD_PATH/$SCHEME.xcframework"  \
|| { echo "Error: Creating framework failed. Aborting."; exit 1; }


echo "Zip it and put output in '$OUTPUT_NAME'"
cd $BUILD_PATH
zip -r "$OUTPUT_NAME" "$SCHEME.xcframework"

echo "Calculating checksum and writing to CHECKSUM.txt"
checksum=$(swift package compute-checksum "$OUTPUT_NAME")
echo $checksum > "CHECKSUM.txt"

