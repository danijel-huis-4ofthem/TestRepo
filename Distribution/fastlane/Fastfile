import("Fastfile_utility")

default_platform(:ios)
platform :ios do

  # Publishes CardLink release version.
  lane :publish do |options|
    sdk_version = options[:sdk]
    tag = sdk_version || get_version_from_git_and_increment_patch(prefix: "sd k-")
    UI.important "Version is #{tag}"

    UI.abort_with_message!("#{e.message}")
  end

  # Searches for tags with format "#{prefix}[0-9]*.[0-9]*.[0-9]*", takes one with max semantic version and increases patch and returns new version (without prefix). Returns nil if tag is not found.
  def get_version_from_git_and_increment_patch(prefix:)
    prefix ||= '' # Set to empty string if null is passed
    # Get tag with highest semantic version from git
    pattern = "#{prefix}[0-9]*.[0-9]*.[0-9]*"
    highest_tag = sh("git tag --sort=version:refname --format='%(refname:strip=2)' -l '#{pattern}' | tail -1").strip
    return if highest_tag.to_s.strip.empty?

    # Increment patch
    version = prefix.empty? ? highest_tag : highest_tag.sub(/^#{Regexp.escape(prefix)}/, "")  # Remove prefix because increment_semantic_patch_version expects semantic version.
    next_version = increment_semantic_patch_version(version)
    UI.important("Found version tag on git '#{highest_tag}'. New version is '#{next_version}'")
    "#{next_version}"  # Re-add prefix.
  end

  def get_openssl_package_version
    version = sh("./GetPackageVersion.swift openssl-swift")
    if version.to_s.strip.empty?
      raise "Failed to find version of openssl-swift in Package.resolved. See GetPackageVersion.swift."
    end
    UI.important("Gematik OpenSSL version detected: #{version}")
    version
  end
end
